soln 1) 
  var student = {
    name: "David Rayy",
    sclass: "VI",
    rollno: 12
  };

  let result = "";

  for (let key in student)
    result += `${key},`;

  console.log(result.substring(0, result.length - 1)); 
  ------------------------------------------------------------------------
  soln 2) 
  var student = {
    name: "David Rayy",
    sclass: "VI",
    rollno: 12
  };

  console.log(student);
  delete student.rollno;
  console.log(student);
 ------------------------------------------------------------------------
  soln 3)
  
  var student = {
    name: "David Rayy",
    sclass: "VI",
    rollno: 12
  };

  let result = 0;
  for (let key in student) {
    result += 1;
  }
  console.log(`Length of student object - ${result}`);
  ----------------------------------------------------------------------
  soln 4)
  
    var library = [{
    author: 'Bill Gates',
    title: 'The Road Ahead',
    readingStatus: true
  }, {
    author: 'Steve Jobs',
    title: 'Walter Isaacson',
    readingStatus: true
  }, {
    author: 'Suzanne Collins',
    title: 'Mockingjay: The Final Book of The Hunger Games',
    readingStatus: false
  }];

 for (let each of library) {
   console.log(`${(each.readingStatus) ? "Have Read" : "Not Read"} - ${each.title} by ${each.author}`);
 }
 
 ----------------------------------------------------------------------
  soln 5)
  
  function Cylinder(r, h) {
    this.r = r;
    this.h = h;
  }

  Cylinder.prototype.getVolume = function() {
    return (Math.PI * this.r * this.r * this.h).toFixed(4);
  }

  let volv2 = new Cylinder(5, 2);
  console.log(volv2.getVolume());
  
  ----------------------------------------------------------------------
  soln 6)
  
   var library = [{
    title: 'The Road Ahead',
    author: 'Bill Gates',
    libraryID: 1254
  }, {
    title: 'Walter Isaacson',
    author: 'Steve Jobs',
    libraryID: 4264
  }, {
    title: 'Mockingjay: The Final Book of The Hunger Games',
    author: 'Suzanne Collins',
    libraryID: 3245
  }];
  
  function sortBy(field="author", asc=true) {
    return (a, b) => {
      a = a[field]; b = b[field];
      if (a === b) { return 0; } // Equal
      else {
        return (asc) ? (a > b)   ? 1 : -1:  // Ascending
                       (b < a)   ? -1 : 1;  // Descending
      }
    }
  }
  
  console.log(library);
  console.log("LibrayID, Ascending");
  console.log(library.sort( sortBy.apply(library, ["libraryID", true]) )); // Asc
  console.log("Author, Ascending");
  console.log(library.sort( sortBy.apply(library, ["author", true]) )); // Asc
  console.log("Title, Descending");
  console.log(library.sort( sortBy.apply(library, ["title", false]) )); // Descending
  
  -----------------------------------------------------------------------------
